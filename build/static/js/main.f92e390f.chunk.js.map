{"version":3,"sources":["Cellule.js","App.js","serviceWorker.js","index.js"],"names":["Cellule","selectCell","activePlayer","_this","props","player","console","log","react_default","a","createElement","className","id","this","value","onClick","changePlayerFunction","concat","dotColor","Component","App","state","playerBlack","playerWhite","checkedboard","changePlayer","e","indexClicked","target","setState","Object","objectSpread","cellColor","forEach","x","count","newCell","i","play","createGrille","grille","push","src_Cellule","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f92e390f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Cellule extends Component {\n\n\n  selectCell = () => {\n    const activePlayer = this.props.player;\n    console.log(\"activePlayer\", activePlayer)\n\n    /*si IndexcurrentCell\n    si this.state.case[IndexcurrentCell] === 0\n    alors\n    array =  [i-9, i-8, i-7, i-1, i+1, i+7, i+8, i+9]\n    for Each(array[I] => )\n    array.filter(i => this.state.case[value])\n    si player1 est true alors */\n  }\n\n\n  render(){\n\n    return (\n      <div className=\"grid-item\" id={this.props.value} onClick={this.props.changePlayerFunction}>\n        <div className=\"pion\">\n          <span className={`dot ${this.props.dotColor}`}></span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Cellule;","import React, { Component } from 'react';\nimport Cellule from './Cellule';\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    playerBlack: true,\n    playerWhite: false,\n    checkedboard: [\n      \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"black\",\"white\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"white\",\"black\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n      \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    ]\n      /*28: 'white',\n      29: 'black',\n      37: 'white',\n      36: 'black',\n      */\n  }\n\n  changePlayer = (e) => {\n    const indexClicked = e.target.id\n    if(this.state.checkedboard[indexClicked] === \"\"){\n      this.setState(\n        {\n          ...this.state,\n          playerBlack: !this.state.playerBlack,\n          playerWhite: !this.state.playerWhite,\n        })\n        let cellColor = \"\";\n        console.log('playerBlack', this.state.playerBlack)\n\n        if(this.state.playerBlack){\n          cellColor =  \"black\"\n        }else{\n          cellColor = \"white\"\n        }\n\n        const play = (x) => {\n        console.log(\"x\", x)\n        if(this.state.checkedboard[indexClicked-x] && this.state.checkedboard[indexClicked-x] !== cellColor){\n          let count = x;\n          console.log('ok', x)\n\n          while(this.state.checkedboard[(indexClicked-count)] !== \"\" && this.state.checkedboard[(indexClicked -count)] !== cellColor){\n            console.log('inwhile')\n            count +=x\n          }\n          const newCell =indexClicked - count;\n          console.log(\"count\", count)\n          if(this.state.checkedboard[newCell] === cellColor){\n            this.setState((state) => {\n              state.checkedboard[indexClicked]=cellColor;\n              let i =indexClicked;\n              console.log(\"last condition\", x)\n                if (x > 0) {\n                  for(i ; i >= (indexClicked-count); i-=x){\n                    state.checkedboard[i]=cellColor\n                  }\n                } else {\n                  for(i ; i <= (indexClicked-count); i-=x){\n                    state.checkedboard[i]=cellColor\n                  }\n                }\n\n              return{\n                checkedboard: state.checkedboard,\n                ...state,\n              }\n            });\n          }\n        }\n      }\n\n      const intervalles = [-9,-8,-7,-1,1,7,8,9];\n      intervalles.forEach(x => play(x))\n    }\n  }\n  createGrille = () => {\n    const grille = [];\n    for(var i = 0; i < 64 ; i++){\n      grille.push(\n      <Cellule\n        value={i}\n        dotColor={this.state.checkedboard[i]}\n        player={this.state.playerBlack ? \"playerBlack\" : \"playerWhite\"}\n        changePlayerFunction={this.changePlayer}/>);\n    }\n    return grille\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"grid-container\">\n          {this.createGrille()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}